// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Player_id(): BigInt {
    let value = this.get("Player_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Player_id(value: BigInt) {
    this.set("Player_id", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get level(): i32 {
    let value = this.get("level");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get strength(): i32 {
    let value = this.get("strength");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set strength(value: i32) {
    this.set("strength", Value.fromI32(value));
  }

  get magic(): i32 {
    let value = this.get("magic");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set magic(value: i32) {
    this.set("magic", Value.fromI32(value));
  }

  get agility(): i32 {
    let value = this.get("agility");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set agility(value: i32) {
    this.set("agility", Value.fromI32(value));
  }

  get defense(): i32 {
    let value = this.get("defense");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set defense(value: i32) {
    this.set("defense", Value.fromI32(value));
  }

  get currentHealth(): i32 {
    let value = this.get("currentHealth");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set currentHealth(value: i32) {
    this.set("currentHealth", Value.fromI32(value));
  }

  get maxHealth(): i32 {
    let value = this.get("maxHealth");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set maxHealth(value: i32) {
    this.set("maxHealth", Value.fromI32(value));
  }

  get currentMana(): i32 {
    let value = this.get("currentMana");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set currentMana(value: i32) {
    this.set("currentMana", Value.fromI32(value));
  }

  get maxMana(): i32 {
    let value = this.get("maxMana");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set maxMana(value: i32) {
    this.set("maxMana", Value.fromI32(value));
  }
}

export class Monster extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Monster entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Monster must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Monster", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Monster | null {
    return changetype<Monster | null>(store.get_in_block("Monster", id));
  }

  static load(id: string): Monster | null {
    return changetype<Monster | null>(store.get("Monster", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get xpReward(): i32 {
    let value = this.get("xpReward");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set xpReward(value: i32) {
    this.set("xpReward", Value.fromI32(value));
  }

  get damage(): i32 {
    let value = this.get("damage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set damage(value: i32) {
    this.set("damage", Value.fromI32(value));
  }

  get hp(): i32 {
    let value = this.get("hp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hp(value: i32) {
    this.set("hp", Value.fromI32(value));
  }

  get cooldown(): i32 {
    let value = this.get("cooldown");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cooldown(value: i32) {
    this.set("cooldown", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }
}
