// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BasicArenaLoss extends ethereum.Event {
  get params(): BasicArenaLoss__Params {
    return new BasicArenaLoss__Params(this);
  }
}

export class BasicArenaLoss__Params {
  _event: BasicArenaLoss;

  constructor(event: BasicArenaLoss) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BasicArenaWin extends ethereum.Event {
  get params(): BasicArenaWin__Params {
    return new BasicArenaWin__Params(this);
  }
}

export class BasicArenaWin__Params {
  _event: BasicArenaWin;

  constructor(event: BasicArenaWin) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateBasicArena extends ethereum.Event {
  get params(): CreateBasicArena__Params {
    return new CreateBasicArena__Params(this);
  }
}

export class CreateBasicArena__Params {
  _event: CreateBasicArena;

  constructor(event: CreateBasicArena) {
    this._event = event;
  }

  get _basicArenaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EnterBasicArena extends ethereum.Event {
  get params(): EnterBasicArena__Params {
    return new EnterBasicArena__Params(this);
  }
}

export class EnterBasicArena__Params {
  _event: EnterBasicArena;

  constructor(event: EnterBasicArena) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeaveBasicArena extends ethereum.Event {
  get params(): LeaveBasicArena__Params {
    return new LeaveBasicArena__Params(this);
  }
}

export class LeaveBasicArena__Params {
  _event: LeaveBasicArena;

  constructor(event: LeaveBasicArena) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BasicEquipmentSchemaCreated extends ethereum.Event {
  get params(): BasicEquipmentSchemaCreated__Params {
    return new BasicEquipmentSchemaCreated__Params(this);
  }
}

export class BasicEquipmentSchemaCreated__Params {
  _event: BasicEquipmentSchemaCreated;

  constructor(event: BasicEquipmentSchemaCreated) {
    this._event = event;
  }

  get _basicEquipmentSchemaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PurchaseBasicEquipment extends ethereum.Event {
  get params(): PurchaseBasicEquipment__Params {
    return new PurchaseBasicEquipment__Params(this);
  }
}

export class PurchaseBasicEquipment__Params {
  _event: PurchaseBasicEquipment;

  constructor(event: PurchaseBasicEquipment) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _equipmentSchemaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DiamondCut extends ethereum.Event {
  get params(): DiamondCut__Params {
    return new DiamondCut__Params(this);
  }
}

export class DiamondCut__Params {
  _event: DiamondCut;

  constructor(event: DiamondCut) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval1 extends ethereum.Event {
  get params(): Approval1__Params {
    return new Approval1__Params(this);
  }
}

export class Approval1__Params {
  _event: Approval1;

  constructor(event: Approval1) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll1 extends ethereum.Event {
  get params(): ApprovalForAll1__Params {
    return new ApprovalForAll1__Params(this);
  }
}

export class ApprovalForAll1__Params {
  _event: ApprovalForAll1;

  constructor(event: ApprovalForAll1) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer1 extends ethereum.Event {
  get params(): Transfer1__Params {
    return new Transfer1__Params(this);
  }
}

export class Transfer1__Params {
  _event: Transfer1;

  constructor(event: Transfer1) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemEquiped extends ethereum.Event {
  get params(): ItemEquiped__Params {
    return new ItemEquiped__Params(this);
  }
}

export class ItemEquiped__Params {
  _event: ItemEquiped;

  constructor(event: ItemEquiped) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _equipmentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemUnequiped extends ethereum.Event {
  get params(): ItemUnequiped__Params {
    return new ItemUnequiped__Params(this);
  }
}

export class ItemUnequiped__Params {
  _event: ItemUnequiped;

  constructor(event: ItemUnequiped) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _equipmentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval2 extends ethereum.Event {
  get params(): Approval2__Params {
    return new Approval2__Params(this);
  }
}

export class Approval2__Params {
  _event: Approval2;

  constructor(event: Approval2) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll2 extends ethereum.Event {
  get params(): ApprovalForAll2__Params {
    return new ApprovalForAll2__Params(this);
  }
}

export class ApprovalForAll2__Params {
  _event: ApprovalForAll2;

  constructor(event: ApprovalForAll2) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreateEquipmentListing extends ethereum.Event {
  get params(): CreateEquipmentListing__Params {
    return new CreateEquipmentListing__Params(this);
  }
}

export class CreateEquipmentListing__Params {
  _event: CreateEquipmentListing;

  constructor(event: CreateEquipmentListing) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreatePlayerListing extends ethereum.Event {
  get params(): CreatePlayerListing__Params {
    return new CreatePlayerListing__Params(this);
  }
}

export class CreatePlayerListing__Params {
  _event: CreatePlayerListing;

  constructor(event: CreatePlayerListing) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelistPlayer extends ethereum.Event {
  get params(): DelistPlayer__Params {
    return new DelistPlayer__Params(this);
  }
}

export class DelistPlayer__Params {
  _event: DelistPlayer;

  constructor(event: DelistPlayer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PurchaseEquipmentLisitng extends ethereum.Event {
  get params(): PurchaseEquipmentLisitng__Params {
    return new PurchaseEquipmentLisitng__Params(this);
  }
}

export class PurchaseEquipmentLisitng__Params {
  _event: PurchaseEquipmentLisitng;

  constructor(event: PurchaseEquipmentLisitng) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PurchasePlayerListing extends ethereum.Event {
  get params(): PurchasePlayerListing__Params {
    return new PurchasePlayerListing__Params(this);
  }
}

export class PurchasePlayerListing__Params {
  _event: PurchasePlayerListing;

  constructor(event: PurchasePlayerListing) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer2 extends ethereum.Event {
  get params(): Transfer2__Params {
    return new Transfer2__Params(this);
  }
}

export class Transfer2__Params {
  _event: Transfer2;

  constructor(event: Transfer2) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateBasicMonster extends ethereum.Event {
  get params(): CreateBasicMonster__Params {
    return new CreateBasicMonster__Params(this);
  }
}

export class CreateBasicMonster__Params {
  _event: CreateBasicMonster;

  constructor(event: CreateBasicMonster) {
    this._event = event;
  }

  get _monsterId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicMonster(): CreateBasicMonster_basicMonsterStruct {
    return changetype<CreateBasicMonster_basicMonsterStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class CreateBasicMonster_basicMonsterStruct extends ethereum.Tuple {
  get basicMonsterId(): BigInt {
    return this[0].toBigInt();
  }

  get xpReward(): BigInt {
    return this[1].toBigInt();
  }

  get damage(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): BigInt {
    return this[3].toBigInt();
  }

  get cooldown(): BigInt {
    return this[4].toBigInt();
  }

  get name(): string {
    return this[5].toString();
  }

  get uri(): string {
    return this[6].toString();
  }
}

export class CreateMagicMonster extends ethereum.Event {
  get params(): CreateMagicMonster__Params {
    return new CreateMagicMonster__Params(this);
  }
}

export class CreateMagicMonster__Params {
  _event: CreateMagicMonster;

  constructor(event: CreateMagicMonster) {
    this._event = event;
  }

  get _monsterId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DragonQuest extends ethereum.Event {
  get params(): DragonQuest__Params {
    return new DragonQuest__Params(this);
  }
}

export class DragonQuest__Params {
  _event: DragonQuest;

  constructor(event: DragonQuest) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EditBasicMonster extends ethereum.Event {
  get params(): EditBasicMonster__Params {
    return new EditBasicMonster__Params(this);
  }
}

export class EditBasicMonster__Params {
  _event: EditBasicMonster;

  constructor(event: EditBasicMonster) {
    this._event = event;
  }

  get _monsterId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FightBasicMonster extends ethereum.Event {
  get params(): FightBasicMonster__Params {
    return new FightBasicMonster__Params(this);
  }
}

export class FightBasicMonster__Params {
  _event: FightBasicMonster;

  constructor(event: FightBasicMonster) {
    this._event = event;
  }

  get _monsterId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FightMagicMonster extends ethereum.Event {
  get params(): FightMagicMonster__Params {
    return new FightMagicMonster__Params(this);
  }
}

export class FightMagicMonster__Params {
  _event: FightMagicMonster;

  constructor(event: FightMagicMonster) {
    this._event = event;
  }

  get _monsterId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred1 extends ethereum.Event {
  get params(): OwnershipTransferred1__Params {
    return new OwnershipTransferred1__Params(this);
  }
}

export class OwnershipTransferred1__Params {
  _event: OwnershipTransferred1;

  constructor(event: OwnershipTransferred1) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ClaimPlayer extends ethereum.Event {
  get params(): ClaimPlayer__Params {
    return new ClaimPlayer__Params(this);
  }
}

export class ClaimPlayer__Params {
  _event: ClaimPlayer;

  constructor(event: ClaimPlayer) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _treasureDropId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get _class(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NameChange extends ethereum.Event {
  get params(): NameChange__Params {
    return new NameChange__Params(this);
  }
}

export class NameChange__Params {
  _event: NameChange;

  constructor(event: NameChange) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newName(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Approval3 extends ethereum.Event {
  get params(): Approval3__Params {
    return new Approval3__Params(this);
  }
}

export class Approval3__Params {
  _event: Approval3;

  constructor(event: Approval3) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll3 extends ethereum.Event {
  get params(): ApprovalForAll3__Params {
    return new ApprovalForAll3__Params(this);
  }
}

export class ApprovalForAll3__Params {
  _event: ApprovalForAll3;

  constructor(event: ApprovalForAll3) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Mint1 extends ethereum.Event {
  get params(): Mint1__Params {
    return new Mint1__Params(this);
  }
}

export class Mint1__Params {
  _event: Mint1;

  constructor(event: Mint1) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get _class(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NameChange1 extends ethereum.Event {
  get params(): NameChange1__Params {
    return new NameChange1__Params(this);
  }
}

export class NameChange1__Params {
  _event: NameChange1;

  constructor(event: NameChange1) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newName(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SentTransferRemote extends ethereum.Event {
  get params(): SentTransferRemote__Params {
    return new SentTransferRemote__Params(this);
  }
}

export class SentTransferRemote__Params {
  _event: SentTransferRemote;

  constructor(event: SentTransferRemote) {
    this._event = event;
  }

  get destination(): string {
    return this._event.parameters[0].value.toString();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get playerId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer3 extends ethereum.Event {
  get params(): Transfer3__Params {
    return new Transfer3__Params(this);
  }
}

export class Transfer3__Params {
  _event: Transfer3;

  constructor(event: Transfer3) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeginQuesting extends ethereum.Event {
  get params(): BeginQuesting__Params {
    return new BeginQuesting__Params(this);
  }
}

export class BeginQuesting__Params {
  _event: BeginQuesting;

  constructor(event: BeginQuesting) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EndQuesting extends ethereum.Event {
  get params(): EndQuesting__Params {
    return new EndQuesting__Params(this);
  }
}

export class EndQuesting__Params {
  _event: EndQuesting;

  constructor(event: EndQuesting) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred2 extends ethereum.Event {
  get params(): OwnershipTransferred2__Params {
    return new OwnershipTransferred2__Params(this);
  }
}

export class OwnershipTransferred2__Params {
  _event: OwnershipTransferred2;

  constructor(event: OwnershipTransferred2) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TrustedSignerChanged extends ethereum.Event {
  get params(): TrustedSignerChanged__Params {
    return new TrustedSignerChanged__Params(this);
  }
}

export class TrustedSignerChanged__Params {
  _event: TrustedSignerChanged;

  constructor(event: TrustedSignerChanged) {
    this._event = event;
  }

  get newSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ConsumeBasicPotion extends ethereum.Event {
  get params(): ConsumeBasicPotion__Params {
    return new ConsumeBasicPotion__Params(this);
  }
}

export class ConsumeBasicPotion__Params {
  _event: ConsumeBasicPotion;

  constructor(event: ConsumeBasicPotion) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicPotionSchemaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateBasicPotion extends ethereum.Event {
  get params(): CreateBasicPotion__Params {
    return new CreateBasicPotion__Params(this);
  }
}

export class CreateBasicPotion__Params {
  _event: CreateBasicPotion;

  constructor(event: CreateBasicPotion) {
    this._event = event;
  }

  get _basicPotionSchemaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _cost(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PurchaseBasicPotion extends ethereum.Event {
  get params(): PurchaseBasicPotion__Params {
    return new PurchaseBasicPotion__Params(this);
  }
}

export class PurchaseBasicPotion__Params {
  _event: PurchaseBasicPotion;

  constructor(event: PurchaseBasicPotion) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _basicPotionSchemaId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeginTrainingBasicHealth extends ethereum.Event {
  get params(): BeginTrainingBasicHealth__Params {
    return new BeginTrainingBasicHealth__Params(this);
  }
}

export class BeginTrainingBasicHealth__Params {
  _event: BeginTrainingBasicHealth;

  constructor(event: BeginTrainingBasicHealth) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeginTrainingMana extends ethereum.Event {
  get params(): BeginTrainingMana__Params {
    return new BeginTrainingMana__Params(this);
  }
}

export class BeginTrainingMana__Params {
  _event: BeginTrainingMana;

  constructor(event: BeginTrainingMana) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EndTrainingBasicHealth extends ethereum.Event {
  get params(): EndTrainingBasicHealth__Params {
    return new EndTrainingBasicHealth__Params(this);
  }
}

export class EndTrainingBasicHealth__Params {
  _event: EndTrainingBasicHealth;

  constructor(event: EndTrainingBasicHealth) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EndTrainingMana extends ethereum.Event {
  get params(): EndTrainingMana__Params {
    return new EndTrainingMana__Params(this);
  }
}

export class EndTrainingMana__Params {
  _event: EndTrainingMana;

  constructor(event: EndTrainingMana) {
    this._event = event;
  }

  get _playerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimTreasure extends ethereum.Event {
  get params(): ClaimTreasure__Params {
    return new ClaimTreasure__Params(this);
  }
}

export class ClaimTreasure__Params {
  _event: ClaimTreasure;

  constructor(event: ClaimTreasure) {
    this._event = event;
  }

  get _playerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _treasureDropId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TreasureSchemaCreation extends ethereum.Event {
  get params(): TreasureSchemaCreation__Params {
    return new TreasureSchemaCreation__Params(this);
  }
}

export class TreasureSchemaCreation__Params {
  _event: TreasureSchemaCreation;

  constructor(event: TreasureSchemaCreation) {
    this._event = event;
  }

  get _treasureSchemaId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DiamondCut1 extends ethereum.Event {
  get params(): DiamondCut1__Params {
    return new DiamondCut1__Params(this);
  }
}

export class DiamondCut1__Params {
  _event: DiamondCut1;

  constructor(event: DiamondCut1) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut1_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut1_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut1_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class DiamondCut2 extends ethereum.Event {
  get params(): DiamondCut2__Params {
    return new DiamondCut2__Params(this);
  }
}

export class DiamondCut2__Params {
  _event: DiamondCut2;

  constructor(event: DiamondCut2) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut2_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut2_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut2_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class ApprovalForAll4 extends ethereum.Event {
  get params(): ApprovalForAll4__Params {
    return new ApprovalForAll4__Params(this);
  }
}

export class ApprovalForAll4__Params {
  _event: ApprovalForAll4;

  constructor(event: ApprovalForAll4) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ApprovalForAll5 extends ethereum.Event {
  get params(): ApprovalForAll5__Params {
    return new ApprovalForAll5__Params(this);
  }
}

export class ApprovalForAll5__Params {
  _event: ApprovalForAll5;

  constructor(event: ApprovalForAll5) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TransferBatch1 extends ethereum.Event {
  get params(): TransferBatch1__Params {
    return new TransferBatch1__Params(this);
  }
}

export class TransferBatch1__Params {
  _event: TransferBatch1;

  constructor(event: TransferBatch1) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle1 extends ethereum.Event {
  get params(): TransferSingle1__Params {
    return new TransferSingle1__Params(this);
  }
}

export class TransferSingle1__Params {
  _event: TransferSingle1;

  constructor(event: TransferSingle1) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI1 extends ethereum.Event {
  get params(): URI1__Params {
    return new URI1__Params(this);
  }
}

export class URI1__Params {
  _event: URI1;

  constructor(event: URI1) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred3 extends ethereum.Event {
  get params(): OwnershipTransferred3__Params {
    return new OwnershipTransferred3__Params(this);
  }
}

export class OwnershipTransferred3__Params {
  _event: OwnershipTransferred3;

  constructor(event: OwnershipTransferred3) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval4 extends ethereum.Event {
  get params(): Approval4__Params {
    return new Approval4__Params(this);
  }
}

export class Approval4__Params {
  _event: Approval4;

  constructor(event: Approval4) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll6 extends ethereum.Event {
  get params(): ApprovalForAll6__Params {
    return new ApprovalForAll6__Params(this);
  }
}

export class ApprovalForAll6__Params {
  _event: ApprovalForAll6;

  constructor(event: ApprovalForAll6) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer4 extends ethereum.Event {
  get params(): Transfer4__Params {
    return new Transfer4__Params(this);
  }
}

export class Transfer4__Params {
  _event: Transfer4;

  constructor(event: Transfer4) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval5 extends ethereum.Event {
  get params(): Approval5__Params {
    return new Approval5__Params(this);
  }
}

export class Approval5__Params {
  _event: Approval5;

  constructor(event: Approval5) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll7 extends ethereum.Event {
  get params(): ApprovalForAll7__Params {
    return new ApprovalForAll7__Params(this);
  }
}

export class ApprovalForAll7__Params {
  _event: ApprovalForAll7;

  constructor(event: ApprovalForAll7) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer5 extends ethereum.Event {
  get params(): Transfer5__Params {
    return new Transfer5__Params(this);
  }
}

export class Transfer5__Params {
  _event: Transfer5;

  constructor(event: Transfer5) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DiamondCut3 extends ethereum.Event {
  get params(): DiamondCut3__Params {
    return new DiamondCut3__Params(this);
  }
}

export class DiamondCut3__Params {
  _event: DiamondCut3;

  constructor(event: DiamondCut3) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut3_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut3_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut3_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class OwnershipTransferred4 extends ethereum.Event {
  get params(): OwnershipTransferred4__Params {
    return new OwnershipTransferred4__Params(this);
  }
}

export class OwnershipTransferred4__Params {
  _event: OwnershipTransferred4;

  constructor(event: OwnershipTransferred4) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred5 extends ethereum.Event {
  get params(): OwnershipTransferred5__Params {
    return new OwnershipTransferred5__Params(this);
  }
}

export class OwnershipTransferred5__Params {
  _event: OwnershipTransferred5;

  constructor(event: OwnershipTransferred5) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TrustedSignerChanged1 extends ethereum.Event {
  get params(): TrustedSignerChanged1__Params {
    return new TrustedSignerChanged1__Params(this);
  }
}

export class TrustedSignerChanged1__Params {
  _event: TrustedSignerChanged1;

  constructor(event: TrustedSignerChanged1) {
    this._event = event;
  }

  get newSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__getBasicArenaResultValue0Struct extends ethereum.Tuple {
  get basicArenaId(): BigInt {
    return this[0].toBigInt();
  }

  get cost(): BigInt {
    return this[1].toBigInt();
  }

  get cooldown(): BigInt {
    return this[2].toBigInt();
  }

  get hostId(): BigInt {
    return this[3].toBigInt();
  }

  get open(): boolean {
    return this[4].toBoolean();
  }

  get hostAddress(): Address {
    return this[5].toAddress();
  }

  get name(): string {
    return this[6].toString();
  }

  get url(): string {
    return this[7].toString();
  }
}

export class Contract__getBasicEquipmentSchemaResultValue0Struct extends ethereum.Tuple {
  get basicEquipmentSchemaId(): BigInt {
    return this[0].toBigInt();
  }

  get slot(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get stat(): BigInt {
    return this[3].toBigInt();
  }

  get cost(): BigInt {
    return this[4].toBigInt();
  }

  get name(): string {
    return this[5].toString();
  }

  get uri(): string {
    return this[6].toString();
  }
}

export class Contract__getEquipmentResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): BigInt {
    return this[1].toBigInt();
  }

  get slot(): BigInt {
    return this[2].toBigInt();
  }

  get rank(): BigInt {
    return this[3].toBigInt();
  }

  get value(): BigInt {
    return this[4].toBigInt();
  }

  get stat(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get uri(): string {
    return this[8].toString();
  }

  get isEquiped(): boolean {
    return this[9].toBoolean();
  }
}

export class Contract__facetsResultFacets_Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class Contract__getPlayerListingResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get playerId(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get pointer(): BigInt {
    return this[3].toBigInt();
  }

  get addressPointer(): BigInt {
    return this[4].toBigInt();
  }
}

export class Contract__getBasicMonsterResultValue0Struct extends ethereum.Tuple {
  get basicMonsterId(): BigInt {
    return this[0].toBigInt();
  }

  get xpReward(): BigInt {
    return this[1].toBigInt();
  }

  get damage(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): BigInt {
    return this[3].toBigInt();
  }

  get cooldown(): BigInt {
    return this[4].toBigInt();
  }

  get name(): string {
    return this[5].toString();
  }

  get uri(): string {
    return this[6].toString();
  }
}

export class Contract__getMagicMonsterResultValue0Struct extends ethereum.Tuple {
  get basicMonsterId(): BigInt {
    return this[0].toBigInt();
  }

  get xpReward(): BigInt {
    return this[1].toBigInt();
  }

  get damage(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): BigInt {
    return this[3].toBigInt();
  }

  get cooldown(): BigInt {
    return this[4].toBigInt();
  }

  get cost(): BigInt {
    return this[5].toBigInt();
  }

  get name(): string {
    return this[6].toString();
  }

  get uri(): string {
    return this[7].toString();
  }
}

export class Contract__getPlayerResultPlayerStruct extends ethereum.Tuple {
  get level(): BigInt {
    return this[0].toBigInt();
  }

  get xp(): BigInt {
    return this[1].toBigInt();
  }

  get status(): BigInt {
    return this[2].toBigInt();
  }

  get strength(): BigInt {
    return this[3].toBigInt();
  }

  get health(): BigInt {
    return this[4].toBigInt();
  }

  get currentHealth(): BigInt {
    return this[5].toBigInt();
  }

  get magic(): BigInt {
    return this[6].toBigInt();
  }

  get mana(): BigInt {
    return this[7].toBigInt();
  }

  get maxMana(): BigInt {
    return this[8].toBigInt();
  }

  get agility(): BigInt {
    return this[9].toBigInt();
  }

  get luck(): BigInt {
    return this[10].toBigInt();
  }

  get wisdom(): BigInt {
    return this[11].toBigInt();
  }

  get haki(): BigInt {
    return this[12].toBigInt();
  }

  get perception(): BigInt {
    return this[13].toBigInt();
  }

  get defense(): BigInt {
    return this[14].toBigInt();
  }

  get name(): string {
    return this[15].toString();
  }

  get uri(): string {
    return this[16].toString();
  }

  get male(): boolean {
    return this[17].toBoolean();
  }

  get slot(): Contract__getPlayerResultPlayerSlotStruct {
    return changetype<Contract__getPlayerResultPlayerSlotStruct>(
      this[18].toTuple()
    );
  }

  get playerClass(): BigInt {
    return this[19].toBigInt();
  }
}

export class Contract__getPlayerResultPlayerSlotStruct extends ethereum.Tuple {
  get head(): BigInt {
    return this[0].toBigInt();
  }

  get body(): BigInt {
    return this[1].toBigInt();
  }

  get leftHand(): BigInt {
    return this[2].toBigInt();
  }

  get rightHand(): BigInt {
    return this[3].toBigInt();
  }

  get pants(): BigInt {
    return this[4].toBigInt();
  }

  get feet(): BigInt {
    return this[5].toBigInt();
  }

  get neck(): BigInt {
    return this[6].toBigInt();
  }
}

export class Contract__getTransferParamsResult {
  value0: Address;
  value1: string;
  value2: BigInt;

  constructor(value0: Address, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getGateway(): Address {
    return this.value0;
  }

  getContractOnChain(): string {
    return this.value1;
  }

  getTest(): BigInt {
    return this.value2;
  }
}

export class Contract__getTreasureResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get rank(): BigInt {
    return this[1].toBigInt();
  }

  get pointer(): BigInt {
    return this[2].toBigInt();
  }

  get name(): string {
    return this[3].toString();
  }

  get uri(): string {
    return this[4].toString();
  }
}

export class Contract__getBasicPotionResultValue0Struct extends ethereum.Tuple {
  get basicHealthPotionSchemaId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get cost(): BigInt {
    return this[2].toBigInt();
  }

  get isHealth(): boolean {
    return this[3].toBoolean();
  }

  get name(): string {
    return this[4].toString();
  }

  get uri(): string {
    return this[5].toString();
  }
}

export class Contract__getTreasure1ResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get treasureId(): BigInt {
    return this[1].toBigInt();
  }

  get owner(): BigInt {
    return this[2].toBigInt();
  }

  get rank(): BigInt {
    return this[3].toBigInt();
  }

  get pointer(): BigInt {
    return this[4].toBigInt();
  }

  get name(): string {
    return this[5].toString();
  }

  get uri(): string {
    return this[6].toString();
  }
}

export class Contract__getTreasureSchemaResultValue0Struct extends ethereum.Tuple {
  get basicTreasureId(): BigInt {
    return this[0].toBigInt();
  }

  get rank(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get uri(): string {
    return this[3].toString();
  }
}

export class Contract__facets1ResultFacets_Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extractTimestampsAndAssertAllAreEqual(): BigInt {
    let result = super.call(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_extractTimestampsAndAssertAllAreEqual(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregateValues(values: Array<BigInt>): BigInt {
    let result = super.call(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );

    return result[0].toBigInt();
  }

  try_aggregateValues(values: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extractTimestampsAndAssertAllAreEqual1(): BigInt {
    let result = super.call(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_extractTimestampsAndAssertAllAreEqual1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorisedSignerIndex(receivedSigner: Address): i32 {
    let result = super.call(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(receivedSigner)]
    );

    return result[0].toI32();
  }

  try_getAuthorisedSignerIndex(
    receivedSigner: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(receivedSigner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDataServiceId(): string {
    let result = super.call(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );

    return result[0].toString();
  }

  try_getDataServiceId(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUniqueSignersThreshold(): i32 {
    let result = super.call(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getUniqueSignersThreshold(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  aggregateValues1(values: Array<BigInt>): BigInt {
    let result = super.call(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );

    return result[0].toBigInt();
  }

  try_aggregateValues1(values: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extractTimestampsAndAssertAllAreEqual2(): BigInt {
    let result = super.call(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_extractTimestampsAndAssertAllAreEqual2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorisedSignerIndex1(receivedSigner: Address): i32 {
    let result = super.call(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(receivedSigner)]
    );

    return result[0].toI32();
  }

  try_getAuthorisedSignerIndex1(
    receivedSigner: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(receivedSigner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDataServiceId1(): string {
    let result = super.call(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );

    return result[0].toString();
  }

  try_getDataServiceId1(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUniqueSignersThreshold1(): i32 {
    let result = super.call(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getUniqueSignersThreshold1(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  aggregateValues2(values: Array<BigInt>): BigInt {
    let result = super.call(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );

    return result[0].toBigInt();
  }

  try_aggregateValues2(values: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extractTimestampsAndAssertAllAreEqual3(): BigInt {
    let result = super.call(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_extractTimestampsAndAssertAllAreEqual3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorisedSignerIndex2(signerAddress: Address): i32 {
    let result = super.call(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)]
    );

    return result[0].toI32();
  }

  try_getAuthorisedSignerIndex2(
    signerAddress: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDataServiceId2(): string {
    let result = super.call(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );

    return result[0].toString();
  }

  try_getDataServiceId2(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getDataServiceId",
      "getDataServiceId():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUniqueSignersThreshold2(): i32 {
    let result = super.call(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getUniqueSignersThreshold2(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBasicArena(
    _basicArenaId: BigInt
  ): Contract__getBasicArenaResultValue0Struct {
    let result = super.call(
      "getBasicArena",
      "getBasicArena(uint256):((uint256,uint256,uint256,uint256,bool,address,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicArenaId)]
    );

    return changetype<Contract__getBasicArenaResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBasicArena(
    _basicArenaId: BigInt
  ): ethereum.CallResult<Contract__getBasicArenaResultValue0Struct> {
    let result = super.tryCall(
      "getBasicArena",
      "getBasicArena(uint256):((uint256,uint256,uint256,uint256,bool,address,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicArenaId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBasicArenaResultValue0Struct>(value[0].toTuple())
    );
  }

  getTotalLosses(_playerId: BigInt): BigInt {
    let result = super.call(
      "getTotalLosses",
      "getTotalLosses(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalLosses(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalLosses",
      "getTotalLosses(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalWins(_playerId: BigInt): BigInt {
    let result = super.call("getTotalWins", "getTotalWins(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toBigInt();
  }

  try_getTotalWins(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalWins",
      "getTotalWins(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBasicEquipmentCount(): BigInt {
    let result = super.call(
      "getBasicEquipmentCount",
      "getBasicEquipmentCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBasicEquipmentCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasicEquipmentCount",
      "getBasicEquipmentCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBasicEquipmentSchema(
    _basicEquipmentSchemaId: BigInt
  ): Contract__getBasicEquipmentSchemaResultValue0Struct {
    let result = super.call(
      "getBasicEquipmentSchema",
      "getBasicEquipmentSchema(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicEquipmentSchemaId)]
    );

    return changetype<Contract__getBasicEquipmentSchemaResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBasicEquipmentSchema(
    _basicEquipmentSchemaId: BigInt
  ): ethereum.CallResult<Contract__getBasicEquipmentSchemaResultValue0Struct> {
    let result = super.tryCall(
      "getBasicEquipmentSchema",
      "getBasicEquipmentSchema(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicEquipmentSchemaId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBasicEquipmentSchemaResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getEquipment(_equipmentId: BigInt): Contract__getEquipmentResultValue0Struct {
    let result = super.call(
      "getEquipment",
      "getEquipment(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(_equipmentId)]
    );

    return changetype<Contract__getEquipmentResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEquipment(
    _equipmentId: BigInt
  ): ethereum.CallResult<Contract__getEquipmentResultValue0Struct> {
    let result = super.tryCall(
      "getEquipment",
      "getEquipment(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(_equipmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getEquipmentResultValue0Struct>(value[0].toTuple())
    );
  }

  getPlayerToEquipment(_playerId: BigInt): Array<BigInt> {
    let result = super.call(
      "getPlayerToEquipment",
      "getPlayerToEquipment(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerToEquipment(
    _playerId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerToEquipment",
      "getPlayerToEquipment(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  facetAddress(_functionSelector: Bytes): Address {
    let result = super.call("facetAddress", "facetAddress(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(_functionSelector)
    ]);

    return result[0].toAddress();
  }

  try_facetAddress(_functionSelector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "facetAddress",
      "facetAddress(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_functionSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  facetAddresses(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetFunctionSelectors(_facet: Address): Array<Bytes> {
    let result = super.call(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetFunctionSelectors(
    _facet: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  facets(): Array<Contract__facetsResultFacets_Struct> {
    let result = super.call("facets", "facets():((address,bytes4[])[])", []);

    return result[0].toTupleArray<Contract__facetsResultFacets_Struct>();
  }

  try_facets(): ethereum.CallResult<
    Array<Contract__facetsResultFacets_Struct>
  > {
    let result = super.tryCall("facets", "facets():((address,bytes4[])[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__facetsResultFacets_Struct>()
    );
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAllPlayerListings(): Array<BigInt> {
    let result = super.call(
      "getAllPlayerListings",
      "getAllPlayerListings():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAllPlayerListings(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllPlayerListings",
      "getAllPlayerListings():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPlayerListing(
    _playerId: BigInt
  ): Contract__getPlayerListingResultValue0Struct {
    let result = super.call(
      "getPlayerListing",
      "getPlayerListing(uint256):((address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return changetype<Contract__getPlayerListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPlayerListing(
    _playerId: BigInt
  ): ethereum.CallResult<Contract__getPlayerListingResultValue0Struct> {
    let result = super.tryCall(
      "getPlayerListing",
      "getPlayerListing(uint256):((address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getPlayerListingResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPlayerListingsByAddress(_address: Address): Array<BigInt> {
    let result = super.call(
      "getPlayerListingsByAddress",
      "getPlayerListingsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerListingsByAddress(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerListingsByAddress",
      "getPlayerListingsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  owners(_playerId: BigInt): Address {
    let result = super.call("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toAddress();
  }

  try_owners(_playerId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBasicMonster(
    _monsterId: BigInt
  ): Contract__getBasicMonsterResultValue0Struct {
    let result = super.call(
      "getBasicMonster",
      "getBasicMonster(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_monsterId)]
    );

    return changetype<Contract__getBasicMonsterResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBasicMonster(
    _monsterId: BigInt
  ): ethereum.CallResult<Contract__getBasicMonsterResultValue0Struct> {
    let result = super.tryCall(
      "getBasicMonster",
      "getBasicMonster(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_monsterId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBasicMonsterResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getBasicMonsterCooldown(_playerId: BigInt, _monsterId: BigInt): BigInt {
    let result = super.call(
      "getBasicMonsterCooldown",
      "getBasicMonsterCooldown(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_monsterId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBasicMonsterCooldown(
    _playerId: BigInt,
    _monsterId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasicMonsterCooldown",
      "getBasicMonsterCooldown(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_monsterId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBasicMonsterCounter(): BigInt {
    let result = super.call(
      "getBasicMonsterCounter",
      "getBasicMonsterCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBasicMonsterCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasicMonsterCounter",
      "getBasicMonsterCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMagicMonster(
    _monsterId: BigInt
  ): Contract__getMagicMonsterResultValue0Struct {
    let result = super.call(
      "getMagicMonster",
      "getMagicMonster(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_monsterId)]
    );

    return changetype<Contract__getMagicMonsterResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMagicMonster(
    _monsterId: BigInt
  ): ethereum.CallResult<Contract__getMagicMonsterResultValue0Struct> {
    let result = super.tryCall(
      "getMagicMonster",
      "getMagicMonster(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_monsterId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getMagicMonsterResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMagicMonsterCooldown(_playerId: BigInt, _monsterId: BigInt): BigInt {
    let result = super.call(
      "getMagicMonsterCooldown",
      "getMagicMonsterCooldown(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_monsterId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMagicMonsterCooldown(
    _playerId: BigInt,
    _monsterId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMagicMonsterCooldown",
      "getMagicMonsterCooldown(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_monsterId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMagicMonsterCounter(): BigInt {
    let result = super.call(
      "getMagicMonsterCounter",
      "getMagicMonsterCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMagicMonsterCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMagicMonsterCounter",
      "getMagicMonsterCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner1(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner1(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimedStatus(_playerDropId: BigInt, _address: Address): boolean {
    let result = super.call(
      "claimedStatus",
      "claimedStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBoolean();
  }

  try_claimedStatus(
    _playerDropId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimedStatus",
      "claimedStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPlayerDropMerkleRoot(_playerDropId: BigInt): Bytes {
    let result = super.call(
      "getPlayerDropMerkleRoot",
      "getPlayerDropMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_playerDropId)]
    );

    return result[0].toBytes();
  }

  try_getPlayerDropMerkleRoot(
    _playerDropId: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPlayerDropMerkleRoot",
      "getPlayerDropMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_playerDropId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  verifyPlayerDropWhitelist(
    _proof: Array<Bytes>,
    _playerDropId: BigInt,
    _address: Address
  ): boolean {
    let result = super.call(
      "verifyPlayerDropWhitelist",
      "verifyPlayerDropWhitelist(bytes32[],uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromUnsignedBigInt(_playerDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyPlayerDropWhitelist(
    _proof: Array<Bytes>,
    _playerDropId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyPlayerDropWhitelist",
      "verifyPlayerDropWhitelist(bytes32[],uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromUnsignedBigInt(_playerDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBlocktime(): BigInt {
    let result = super.call("getBlocktime", "getBlocktime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBlocktime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBlocktime", "getBlocktime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayer(_playerId: BigInt): Contract__getPlayerResultPlayerStruct {
    let result = super.call(
      "getPlayer",
      "getPlayer(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string,bool,(uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256))",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return changetype<Contract__getPlayerResultPlayerStruct>(
      result[0].toTuple()
    );
  }

  try_getPlayer(
    _playerId: BigInt
  ): ethereum.CallResult<Contract__getPlayerResultPlayerStruct> {
    let result = super.tryCall(
      "getPlayer",
      "getPlayer(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string,bool,(uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256))",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getPlayerResultPlayerStruct>(value[0].toTuple())
    );
  }

  getPlayers(_address: Address): Array<BigInt> {
    let result = super.call("getPlayers", "getPlayers(address):(uint256[])", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBigIntArray();
  }

  try_getPlayers(_address: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayers",
      "getPlayers(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRequestMetadata(
    _destGasLimit: BigInt,
    _destGasPrice: BigInt,
    _ackGasLimit: BigInt,
    _ackGasPrice: BigInt,
    _relayerFees: BigInt,
    _ackType: i32,
    _isReadCall: boolean,
    _asmAddress: Bytes
  ): Bytes {
    let result = super.call(
      "getRequestMetadata",
      "getRequestMetadata(uint64,uint64,uint64,uint64,uint128,uint8,bool,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(_destGasLimit),
        ethereum.Value.fromUnsignedBigInt(_destGasPrice),
        ethereum.Value.fromUnsignedBigInt(_ackGasLimit),
        ethereum.Value.fromUnsignedBigInt(_ackGasPrice),
        ethereum.Value.fromUnsignedBigInt(_relayerFees),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_ackType)),
        ethereum.Value.fromBoolean(_isReadCall),
        ethereum.Value.fromBytes(_asmAddress)
      ]
    );

    return result[0].toBytes();
  }

  try_getRequestMetadata(
    _destGasLimit: BigInt,
    _destGasPrice: BigInt,
    _ackGasLimit: BigInt,
    _ackGasPrice: BigInt,
    _relayerFees: BigInt,
    _ackType: i32,
    _isReadCall: boolean,
    _asmAddress: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRequestMetadata",
      "getRequestMetadata(uint64,uint64,uint64,uint64,uint128,uint8,bool,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(_destGasLimit),
        ethereum.Value.fromUnsignedBigInt(_destGasPrice),
        ethereum.Value.fromUnsignedBigInt(_ackGasLimit),
        ethereum.Value.fromUnsignedBigInt(_ackGasPrice),
        ethereum.Value.fromUnsignedBigInt(_relayerFees),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_ackType)),
        ethereum.Value.fromBoolean(_isReadCall),
        ethereum.Value.fromBytes(_asmAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransferParams(_chainId: string): Contract__getTransferParamsResult {
    let result = super.call(
      "getTransferParams",
      "getTransferParams(string):(address,string,uint256)",
      [ethereum.Value.fromString(_chainId)]
    );

    return new Contract__getTransferParamsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_getTransferParams(
    _chainId: string
  ): ethereum.CallResult<Contract__getTransferParamsResult> {
    let result = super.tryCall(
      "getTransferParams",
      "getTransferParams(string):(address,string,uint256)",
      [ethereum.Value.fromString(_chainId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTransferParamsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }

  nameAvailable(_name: string): boolean {
    let result = super.call("nameAvailable", "nameAvailable(string):(bool)", [
      ethereum.Value.fromString(_name)
    ]);

    return result[0].toBoolean();
  }

  try_nameAvailable(_name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nameAvailable",
      "nameAvailable(string):(bool)",
      [ethereum.Value.fromString(_name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOfPlayer(_playerId: BigInt): Address {
    let result = super.call(
      "ownerOfPlayer",
      "ownerOfPlayer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return result[0].toAddress();
  }

  try_ownerOfPlayer(_playerId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerOfPlayer",
      "ownerOfPlayer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playerCount(): BigInt {
    let result = super.call("playerCount", "playerCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_playerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("playerCount", "playerCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCooldown(_playerId: BigInt): BigInt {
    let result = super.call("getCooldown", "getCooldown(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toBigInt();
  }

  try_getCooldown(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCooldown",
      "getCooldown(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGemBalance(_address: Address): BigInt {
    let result = super.call(
      "getGemBalance",
      "getGemBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_getGemBalance(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGemBalance",
      "getGemBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGemStart(_playerId: BigInt): BigInt {
    let result = super.call("getGemStart", "getGemStart(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toBigInt();
  }

  try_getGemStart(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGemStart",
      "getGemStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGoldBalance(_address: Address): BigInt {
    let result = super.call(
      "getGoldBalance",
      "getGoldBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_getGoldBalance(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGoldBalance",
      "getGoldBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGoldStart(_playerId: BigInt): BigInt {
    let result = super.call("getGoldStart", "getGoldStart(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toBigInt();
  }

  try_getGoldStart(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGoldStart",
      "getGoldStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasure(_treasureId: BigInt): Contract__getTreasureResultValue0Struct {
    let result = super.call(
      "getTreasure",
      "getTreasure(uint256):((uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureId)]
    );

    return changetype<Contract__getTreasureResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTreasure(
    _treasureId: BigInt
  ): ethereum.CallResult<Contract__getTreasureResultValue0Struct> {
    let result = super.tryCall(
      "getTreasure",
      "getTreasure(uint256):((uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getTreasureResultValue0Struct>(value[0].toTuple())
    );
  }

  getTreasures(_playerId: BigInt): Array<BigInt> {
    let result = super.call(
      "getTreasures",
      "getTreasures(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return result[0].toBigIntArray();
  }

  try_getTreasures(_playerId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTreasures",
      "getTreasures(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  owner2(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner2(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaiscPotionCount(_playerId: BigInt, _basicPotionSchemaId: BigInt): BigInt {
    let result = super.call(
      "getBaiscPotionCount",
      "getBaiscPotionCount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_basicPotionSchemaId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBaiscPotionCount(
    _playerId: BigInt,
    _basicPotionSchemaId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaiscPotionCount",
      "getBaiscPotionCount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_playerId),
        ethereum.Value.fromUnsignedBigInt(_basicPotionSchemaId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBasicPotion(
    _basicPotionSchemaId: BigInt
  ): Contract__getBasicPotionResultValue0Struct {
    let result = super.call(
      "getBasicPotion",
      "getBasicPotion(uint256):((uint256,uint256,uint256,bool,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicPotionSchemaId)]
    );

    return changetype<Contract__getBasicPotionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBasicPotion(
    _basicPotionSchemaId: BigInt
  ): ethereum.CallResult<Contract__getBasicPotionResultValue0Struct> {
    let result = super.tryCall(
      "getBasicPotion",
      "getBasicPotion(uint256):((uint256,uint256,uint256,bool,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_basicPotionSchemaId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBasicPotionResultValue0Struct>(value[0].toTuple())
    );
  }

  getBasicPotionSchemaCount(): BigInt {
    let result = super.call(
      "getBasicPotionSchemaCount",
      "getBasicPotionSchemaCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBasicPotionSchemaCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasicPotionSchemaCount",
      "getBasicPotionSchemaCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHealthStart(_playerId: BigInt): BigInt {
    let result = super.call(
      "getHealthStart",
      "getHealthStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );

    return result[0].toBigInt();
  }

  try_getHealthStart(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHealthStart",
      "getHealthStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManaStart(_playerId: BigInt): BigInt {
    let result = super.call("getManaStart", "getManaStart(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_playerId)
    ]);

    return result[0].toBigInt();
  }

  try_getManaStart(_playerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManaStart",
      "getManaStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimedStatus1(_treasureDropId: BigInt, _address: Address): boolean {
    let result = super.call(
      "claimedStatus",
      "claimedStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_treasureDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBoolean();
  }

  try_claimedStatus1(
    _treasureDropId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimedStatus",
      "claimedStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_treasureDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTreasureDropMerkleRoot(_treasureDropId: BigInt): Bytes {
    let result = super.call(
      "getTreasureDropMerkleRoot",
      "getTreasureDropMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_treasureDropId)]
    );

    return result[0].toBytes();
  }

  try_getTreasureDropMerkleRoot(
    _treasureDropId: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTreasureDropMerkleRoot",
      "getTreasureDropMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_treasureDropId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  verifyTreasureDropWhitelist(
    _proof: Array<Bytes>,
    _treasureDropId: BigInt,
    _address: Address
  ): boolean {
    let result = super.call(
      "verifyTreasureDropWhitelist",
      "verifyTreasureDropWhitelist(bytes32[],uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromUnsignedBigInt(_treasureDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyTreasureDropWhitelist(
    _proof: Array<Bytes>,
    _treasureDropId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyTreasureDropWhitelist",
      "verifyTreasureDropWhitelist(bytes32[],uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromUnsignedBigInt(_treasureDropId),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTreasure1(_treasureId: BigInt): Contract__getTreasure1ResultValue0Struct {
    let result = super.call(
      "getTreasure",
      "getTreasure(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureId)]
    );

    return changetype<Contract__getTreasure1ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTreasure1(
    _treasureId: BigInt
  ): ethereum.CallResult<Contract__getTreasure1ResultValue0Struct> {
    let result = super.tryCall(
      "getTreasure",
      "getTreasure(uint256):((uint256,uint256,uint256,uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getTreasure1ResultValue0Struct>(value[0].toTuple())
    );
  }

  getTreasureSchema(
    _treasureSchemaId: BigInt
  ): Contract__getTreasureSchemaResultValue0Struct {
    let result = super.call(
      "getTreasureSchema",
      "getTreasureSchema(uint256):((uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureSchemaId)]
    );

    return changetype<Contract__getTreasureSchemaResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTreasureSchema(
    _treasureSchemaId: BigInt
  ): ethereum.CallResult<Contract__getTreasureSchemaResultValue0Struct> {
    let result = super.tryCall(
      "getTreasureSchema",
      "getTreasureSchema(uint256):((uint256,uint256,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_treasureSchemaId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getTreasureSchemaResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getTreasureSchemaCounter(): BigInt {
    let result = super.call(
      "getTreasureSchemaCounter",
      "getTreasureSchemaCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTreasureSchemaCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasureSchemaCounter",
      "getTreasureSchemaCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  facetAddress1(_functionSelector: Bytes): Address {
    let result = super.call("facetAddress", "facetAddress(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(_functionSelector)
    ]);

    return result[0].toAddress();
  }

  try_facetAddress1(_functionSelector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "facetAddress",
      "facetAddress(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_functionSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  facetAddresses1(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses1(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetFunctionSelectors1(_facet: Address): Array<Bytes> {
    let result = super.call(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetFunctionSelectors1(
    _facet: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  facets1(): Array<Contract__facets1ResultFacets_Struct> {
    let result = super.call("facets", "facets():((address,bytes4[])[])", []);

    return result[0].toTupleArray<Contract__facets1ResultFacets_Struct>();
  }

  try_facets1(): ethereum.CallResult<
    Array<Contract__facets1ResultFacets_Struct>
  > {
    let result = super.tryCall("facets", "facets():((address,bytes4[])[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__facets1ResultFacets_Struct>()
    );
  }

  balanceOf1(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf1(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll1(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll1(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface1(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface1(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf2(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf2(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch1(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch1(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll2(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll2(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface2(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface2(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface3(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface3(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface4(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface4(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner3(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner3(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf3(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf3(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved1(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved1(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll3(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll3(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf1(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf1(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface5(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface5(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf4(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf4(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved2(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved2(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll4(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll4(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name1(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name1(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf2(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf2(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface6(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface6(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol1(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol1(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI1(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI1(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  currentVersion(): BigInt {
    let result = super.call("currentVersion", "currentVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentVersion",
      "currentVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner4(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner4(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface7(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface7(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class CreatBasicArenaCall extends ethereum.Call {
  get inputs(): CreatBasicArenaCall__Inputs {
    return new CreatBasicArenaCall__Inputs(this);
  }

  get outputs(): CreatBasicArenaCall__Outputs {
    return new CreatBasicArenaCall__Outputs(this);
  }
}

export class CreatBasicArenaCall__Inputs {
  _call: CreatBasicArenaCall;

  constructor(call: CreatBasicArenaCall) {
    this._call = call;
  }

  get _cost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cooldown(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatBasicArenaCall__Outputs {
  _call: CreatBasicArenaCall;

  constructor(call: CreatBasicArenaCall) {
    this._call = call;
  }
}

export class EnterBasicArenaCall extends ethereum.Call {
  get inputs(): EnterBasicArenaCall__Inputs {
    return new EnterBasicArenaCall__Inputs(this);
  }

  get outputs(): EnterBasicArenaCall__Outputs {
    return new EnterBasicArenaCall__Outputs(this);
  }
}

export class EnterBasicArenaCall__Inputs {
  _call: EnterBasicArenaCall;

  constructor(call: EnterBasicArenaCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnterBasicArenaCall__Outputs {
  _call: EnterBasicArenaCall;

  constructor(call: EnterBasicArenaCall) {
    this._call = call;
  }
}

export class FightBaiscArenaCall extends ethereum.Call {
  get inputs(): FightBaiscArenaCall__Inputs {
    return new FightBaiscArenaCall__Inputs(this);
  }

  get outputs(): FightBaiscArenaCall__Outputs {
    return new FightBaiscArenaCall__Outputs(this);
  }
}

export class FightBaiscArenaCall__Inputs {
  _call: FightBaiscArenaCall;

  constructor(call: FightBaiscArenaCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FightBaiscArenaCall__Outputs {
  _call: FightBaiscArenaCall;

  constructor(call: FightBaiscArenaCall) {
    this._call = call;
  }
}

export class LeaveBasicArenaCall extends ethereum.Call {
  get inputs(): LeaveBasicArenaCall__Inputs {
    return new LeaveBasicArenaCall__Inputs(this);
  }

  get outputs(): LeaveBasicArenaCall__Outputs {
    return new LeaveBasicArenaCall__Outputs(this);
  }
}

export class LeaveBasicArenaCall__Inputs {
  _call: LeaveBasicArenaCall;

  constructor(call: LeaveBasicArenaCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _basicArenaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LeaveBasicArenaCall__Outputs {
  _call: LeaveBasicArenaCall;

  constructor(call: LeaveBasicArenaCall) {
    this._call = call;
  }
}

export class _createBasicEquipmentCall extends ethereum.Call {
  get inputs(): _createBasicEquipmentCall__Inputs {
    return new _createBasicEquipmentCall__Inputs(this);
  }

  get outputs(): _createBasicEquipmentCall__Outputs {
    return new _createBasicEquipmentCall__Outputs(this);
  }
}

export class _createBasicEquipmentCall__Inputs {
  _call: _createBasicEquipmentCall;

  constructor(call: _createBasicEquipmentCall) {
    this._call = call;
  }

  get _slot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stat(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _cost(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class _createBasicEquipmentCall__Outputs {
  _call: _createBasicEquipmentCall;

  constructor(call: _createBasicEquipmentCall) {
    this._call = call;
  }
}

export class PurchaseBasicEquipmentCall extends ethereum.Call {
  get inputs(): PurchaseBasicEquipmentCall__Inputs {
    return new PurchaseBasicEquipmentCall__Inputs(this);
  }

  get outputs(): PurchaseBasicEquipmentCall__Outputs {
    return new PurchaseBasicEquipmentCall__Outputs(this);
  }
}

export class PurchaseBasicEquipmentCall__Inputs {
  _call: PurchaseBasicEquipmentCall;

  constructor(call: PurchaseBasicEquipmentCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _equipmentSchemaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PurchaseBasicEquipmentCall__Outputs {
  _call: PurchaseBasicEquipmentCall;

  constructor(call: PurchaseBasicEquipmentCall) {
    this._call = call;
  }
}

export class DiamondCutCall extends ethereum.Call {
  get inputs(): DiamondCutCall__Inputs {
    return new DiamondCutCall__Inputs(this);
  }

  get outputs(): DiamondCutCall__Outputs {
    return new DiamondCutCall__Outputs(this);
  }
}

export class DiamondCutCall__Inputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }

  get _diamondCut(): Array<DiamondCutCall_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DiamondCutCall_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DiamondCutCall__Outputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }
}

export class DiamondCutCall_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class EquipCall extends ethereum.Call {
  get inputs(): EquipCall__Inputs {
    return new EquipCall__Inputs(this);
  }

  get outputs(): EquipCall__Outputs {
    return new EquipCall__Outputs(this);
  }
}

export class EquipCall__Inputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _equipmentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EquipCall__Outputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }
}

export class UnequipCall extends ethereum.Call {
  get inputs(): UnequipCall__Inputs {
    return new UnequipCall__Inputs(this);
  }

  get outputs(): UnequipCall__Outputs {
    return new UnequipCall__Outputs(this);
  }
}

export class UnequipCall__Inputs {
  _call: UnequipCall;

  constructor(call: UnequipCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _equipmentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnequipCall__Outputs {
  _call: UnequipCall;

  constructor(call: UnequipCall) {
    this._call = call;
  }
}

export class CreatePlayerListingCall extends ethereum.Call {
  get inputs(): CreatePlayerListingCall__Inputs {
    return new CreatePlayerListingCall__Inputs(this);
  }

  get outputs(): CreatePlayerListingCall__Outputs {
    return new CreatePlayerListingCall__Outputs(this);
  }
}

export class CreatePlayerListingCall__Inputs {
  _call: CreatePlayerListingCall;

  constructor(call: CreatePlayerListingCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreatePlayerListingCall__Outputs {
  _call: CreatePlayerListingCall;

  constructor(call: CreatePlayerListingCall) {
    this._call = call;
  }
}

export class DeListPlayerCall extends ethereum.Call {
  get inputs(): DeListPlayerCall__Inputs {
    return new DeListPlayerCall__Inputs(this);
  }

  get outputs(): DeListPlayerCall__Outputs {
    return new DeListPlayerCall__Outputs(this);
  }
}

export class DeListPlayerCall__Inputs {
  _call: DeListPlayerCall;

  constructor(call: DeListPlayerCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeListPlayerCall__Outputs {
  _call: DeListPlayerCall;

  constructor(call: DeListPlayerCall) {
    this._call = call;
  }
}

export class PurchasePlayerCall extends ethereum.Call {
  get inputs(): PurchasePlayerCall__Inputs {
    return new PurchasePlayerCall__Inputs(this);
  }

  get outputs(): PurchasePlayerCall__Outputs {
    return new PurchasePlayerCall__Outputs(this);
  }
}

export class PurchasePlayerCall__Inputs {
  _call: PurchasePlayerCall;

  constructor(call: PurchasePlayerCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchasePlayerCall__Outputs {
  _call: PurchasePlayerCall;

  constructor(call: PurchasePlayerCall) {
    this._call = call;
  }
}

export class TransferPlayerCall extends ethereum.Call {
  get inputs(): TransferPlayerCall__Inputs {
    return new TransferPlayerCall__Inputs(this);
  }

  get outputs(): TransferPlayerCall__Outputs {
    return new TransferPlayerCall__Outputs(this);
  }
}

export class TransferPlayerCall__Inputs {
  _call: TransferPlayerCall;

  constructor(call: TransferPlayerCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _playerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferPlayerCall__Outputs {
  _call: TransferPlayerCall;

  constructor(call: TransferPlayerCall) {
    this._call = call;
  }
}

export class CreateBasicMonsterCall extends ethereum.Call {
  get inputs(): CreateBasicMonsterCall__Inputs {
    return new CreateBasicMonsterCall__Inputs(this);
  }

  get outputs(): CreateBasicMonsterCall__Outputs {
    return new CreateBasicMonsterCall__Outputs(this);
  }
}

export class CreateBasicMonsterCall__Inputs {
  _call: CreateBasicMonsterCall;

  constructor(call: CreateBasicMonsterCall) {
    this._call = call;
  }

  get _xpReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _damage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _hp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _cooldown(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateBasicMonsterCall__Outputs {
  _call: CreateBasicMonsterCall;

  constructor(call: CreateBasicMonsterCall) {
    this._call = call;
  }
}

export class EditBasicMonsterCall extends ethereum.Call {
  get inputs(): EditBasicMonsterCall__Inputs {
    return new EditBasicMonsterCall__Inputs(this);
  }

  get outputs(): EditBasicMonsterCall__Outputs {
    return new EditBasicMonsterCall__Outputs(this);
  }
}

export class EditBasicMonsterCall__Inputs {
  _call: EditBasicMonsterCall;

  constructor(call: EditBasicMonsterCall) {
    this._call = call;
  }

  get _basicMonsterId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _xpReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _damage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _hp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _cooldown(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class EditBasicMonsterCall__Outputs {
  _call: EditBasicMonsterCall;

  constructor(call: EditBasicMonsterCall) {
    this._call = call;
  }
}

export class FightBasicMonsterCall extends ethereum.Call {
  get inputs(): FightBasicMonsterCall__Inputs {
    return new FightBasicMonsterCall__Inputs(this);
  }

  get outputs(): FightBasicMonsterCall__Outputs {
    return new FightBasicMonsterCall__Outputs(this);
  }
}

export class FightBasicMonsterCall__Inputs {
  _call: FightBasicMonsterCall;

  constructor(call: FightBasicMonsterCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _monsterId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FightBasicMonsterCall__Outputs {
  _call: FightBasicMonsterCall;

  constructor(call: FightBasicMonsterCall) {
    this._call = call;
  }
}

export class FightMagicMonsterCall extends ethereum.Call {
  get inputs(): FightMagicMonsterCall__Inputs {
    return new FightMagicMonsterCall__Inputs(this);
  }

  get outputs(): FightMagicMonsterCall__Outputs {
    return new FightMagicMonsterCall__Outputs(this);
  }
}

export class FightMagicMonsterCall__Inputs {
  _call: FightMagicMonsterCall;

  constructor(call: FightMagicMonsterCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _monsterId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FightMagicMonsterCall__Outputs {
  _call: FightMagicMonsterCall;

  constructor(call: FightMagicMonsterCall) {
    this._call = call;
  }
}

export class TransferOwnership1Call extends ethereum.Call {
  get inputs(): TransferOwnership1Call__Inputs {
    return new TransferOwnership1Call__Inputs(this);
  }

  get outputs(): TransferOwnership1Call__Outputs {
    return new TransferOwnership1Call__Outputs(this);
  }
}

export class TransferOwnership1Call__Inputs {
  _call: TransferOwnership1Call;

  constructor(call: TransferOwnership1Call) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership1Call__Outputs {
  _call: TransferOwnership1Call;

  constructor(call: TransferOwnership1Call) {
    this._call = call;
  }
}

export class ChangeNameFeeCall extends ethereum.Call {
  get inputs(): ChangeNameFeeCall__Inputs {
    return new ChangeNameFeeCall__Inputs(this);
  }

  get outputs(): ChangeNameFeeCall__Outputs {
    return new ChangeNameFeeCall__Outputs(this);
  }
}

export class ChangeNameFeeCall__Inputs {
  _call: ChangeNameFeeCall;

  constructor(call: ChangeNameFeeCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeNameFeeCall__Outputs {
  _call: ChangeNameFeeCall;

  constructor(call: ChangeNameFeeCall) {
    this._call = call;
  }
}

export class ClaimPlayerDropMantleCall extends ethereum.Call {
  get inputs(): ClaimPlayerDropMantleCall__Inputs {
    return new ClaimPlayerDropMantleCall__Inputs(this);
  }

  get outputs(): ClaimPlayerDropMantleCall__Outputs {
    return new ClaimPlayerDropMantleCall__Outputs(this);
  }
}

export class ClaimPlayerDropMantleCall__Inputs {
  _call: ClaimPlayerDropMantleCall;

  constructor(call: ClaimPlayerDropMantleCall) {
    this._call = call;
  }

  get _treasureDropId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _isMale(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _class(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ClaimPlayerDropMantleCall__Outputs {
  _call: ClaimPlayerDropMantleCall;

  constructor(call: ClaimPlayerDropMantleCall) {
    this._call = call;
  }
}

export class CreatePlayerDropCall extends ethereum.Call {
  get inputs(): CreatePlayerDropCall__Inputs {
    return new CreatePlayerDropCall__Inputs(this);
  }

  get outputs(): CreatePlayerDropCall__Outputs {
    return new CreatePlayerDropCall__Outputs(this);
  }
}

export class CreatePlayerDropCall__Inputs {
  _call: CreatePlayerDropCall;

  constructor(call: CreatePlayerDropCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreatePlayerDropCall__Outputs {
  _call: CreatePlayerDropCall;

  constructor(call: CreatePlayerDropCall) {
    this._call = call;
  }
}

export class ChangeNameCall extends ethereum.Call {
  get inputs(): ChangeNameCall__Inputs {
    return new ChangeNameCall__Inputs(this);
  }

  get outputs(): ChangeNameCall__Outputs {
    return new ChangeNameCall__Outputs(this);
  }
}

export class ChangeNameCall__Inputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeNameCall__Outputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }
}

export class LevelUpCall extends ethereum.Call {
  get inputs(): LevelUpCall__Inputs {
    return new LevelUpCall__Inputs(this);
  }

  get outputs(): LevelUpCall__Outputs {
    return new LevelUpCall__Outputs(this);
  }
}

export class LevelUpCall__Inputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stat(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LevelUpCall__Outputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _isMale(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _class(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SetContractOnChainCall extends ethereum.Call {
  get inputs(): SetContractOnChainCall__Inputs {
    return new SetContractOnChainCall__Inputs(this);
  }

  get outputs(): SetContractOnChainCall__Outputs {
    return new SetContractOnChainCall__Outputs(this);
  }
}

export class SetContractOnChainCall__Inputs {
  _call: SetContractOnChainCall;

  constructor(call: SetContractOnChainCall) {
    this._call = call;
  }

  get _chainId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _contractAddress(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetContractOnChainCall__Outputs {
  _call: SetContractOnChainCall;

  constructor(call: SetContractOnChainCall) {
    this._call = call;
  }
}

export class SetGatewayCall extends ethereum.Call {
  get inputs(): SetGatewayCall__Inputs {
    return new SetGatewayCall__Inputs(this);
  }

  get outputs(): SetGatewayCall__Outputs {
    return new SetGatewayCall__Outputs(this);
  }
}

export class SetGatewayCall__Inputs {
  _call: SetGatewayCall;

  constructor(call: SetGatewayCall) {
    this._call = call;
  }

  get gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feePayer(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetGatewayCall__Outputs {
  _call: SetGatewayCall;

  constructor(call: SetGatewayCall) {
    this._call = call;
  }
}

export class TransferRemoteCall extends ethereum.Call {
  get inputs(): TransferRemoteCall__Inputs {
    return new TransferRemoteCall__Inputs(this);
  }

  get outputs(): TransferRemoteCall__Outputs {
    return new TransferRemoteCall__Outputs(this);
  }
}

export class TransferRemoteCall__Inputs {
  _call: TransferRemoteCall;

  constructor(call: TransferRemoteCall) {
    this._call = call;
  }

  get _destination(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _recipientAsAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _recipientAsString(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _playerId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _requestMetadata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferRemoteCall__Outputs {
  _call: TransferRemoteCall;

  constructor(call: TransferRemoteCall) {
    this._call = call;
  }
}

export class EndQuestGemCall extends ethereum.Call {
  get inputs(): EndQuestGemCall__Inputs {
    return new EndQuestGemCall__Inputs(this);
  }

  get outputs(): EndQuestGemCall__Outputs {
    return new EndQuestGemCall__Outputs(this);
  }
}

export class EndQuestGemCall__Inputs {
  _call: EndQuestGemCall;

  constructor(call: EndQuestGemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndQuestGemCall__Outputs {
  _call: EndQuestGemCall;

  constructor(call: EndQuestGemCall) {
    this._call = call;
  }
}

export class EndQuestGoldCall extends ethereum.Call {
  get inputs(): EndQuestGoldCall__Inputs {
    return new EndQuestGoldCall__Inputs(this);
  }

  get outputs(): EndQuestGoldCall__Outputs {
    return new EndQuestGoldCall__Outputs(this);
  }
}

export class EndQuestGoldCall__Inputs {
  _call: EndQuestGoldCall;

  constructor(call: EndQuestGoldCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndQuestGoldCall__Outputs {
  _call: EndQuestGoldCall;

  constructor(call: EndQuestGoldCall) {
    this._call = call;
  }
}

export class StartQuestGemCall extends ethereum.Call {
  get inputs(): StartQuestGemCall__Inputs {
    return new StartQuestGemCall__Inputs(this);
  }

  get outputs(): StartQuestGemCall__Outputs {
    return new StartQuestGemCall__Outputs(this);
  }
}

export class StartQuestGemCall__Inputs {
  _call: StartQuestGemCall;

  constructor(call: StartQuestGemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartQuestGemCall__Outputs {
  _call: StartQuestGemCall;

  constructor(call: StartQuestGemCall) {
    this._call = call;
  }
}

export class StartQuestGoldCall extends ethereum.Call {
  get inputs(): StartQuestGoldCall__Inputs {
    return new StartQuestGoldCall__Inputs(this);
  }

  get outputs(): StartQuestGoldCall__Outputs {
    return new StartQuestGoldCall__Outputs(this);
  }
}

export class StartQuestGoldCall__Inputs {
  _call: StartQuestGoldCall;

  constructor(call: StartQuestGoldCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartQuestGoldCall__Outputs {
  _call: StartQuestGoldCall;

  constructor(call: StartQuestGoldCall) {
    this._call = call;
  }
}

export class RenounceOwnership1Call extends ethereum.Call {
  get inputs(): RenounceOwnership1Call__Inputs {
    return new RenounceOwnership1Call__Inputs(this);
  }

  get outputs(): RenounceOwnership1Call__Outputs {
    return new RenounceOwnership1Call__Outputs(this);
  }
}

export class RenounceOwnership1Call__Inputs {
  _call: RenounceOwnership1Call;

  constructor(call: RenounceOwnership1Call) {
    this._call = call;
  }
}

export class RenounceOwnership1Call__Outputs {
  _call: RenounceOwnership1Call;

  constructor(call: RenounceOwnership1Call) {
    this._call = call;
  }
}

export class TransferOwnership2Call extends ethereum.Call {
  get inputs(): TransferOwnership2Call__Inputs {
    return new TransferOwnership2Call__Inputs(this);
  }

  get outputs(): TransferOwnership2Call__Outputs {
    return new TransferOwnership2Call__Outputs(this);
  }
}

export class TransferOwnership2Call__Inputs {
  _call: TransferOwnership2Call;

  constructor(call: TransferOwnership2Call) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership2Call__Outputs {
  _call: TransferOwnership2Call;

  constructor(call: TransferOwnership2Call) {
    this._call = call;
  }
}

export class ActiveScriptCall extends ethereum.Call {
  get inputs(): ActiveScriptCall__Inputs {
    return new ActiveScriptCall__Inputs(this);
  }

  get outputs(): ActiveScriptCall__Outputs {
    return new ActiveScriptCall__Outputs(this);
  }
}

export class ActiveScriptCall__Inputs {
  _call: ActiveScriptCall;

  constructor(call: ActiveScriptCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActiveScriptCall__Outputs {
  _call: ActiveScriptCall;

  constructor(call: ActiveScriptCall) {
    this._call = call;
  }
}

export class OpenArenaCall extends ethereum.Call {
  get inputs(): OpenArenaCall__Inputs {
    return new OpenArenaCall__Inputs(this);
  }

  get outputs(): OpenArenaCall__Outputs {
    return new OpenArenaCall__Outputs(this);
  }
}

export class OpenArenaCall__Inputs {
  _call: OpenArenaCall;

  constructor(call: OpenArenaCall) {
    this._call = call;
  }
}

export class OpenArenaCall__Outputs {
  _call: OpenArenaCall;

  constructor(call: OpenArenaCall) {
    this._call = call;
  }
}

export class UdpateDefeseCall extends ethereum.Call {
  get inputs(): UdpateDefeseCall__Inputs {
    return new UdpateDefeseCall__Inputs(this);
  }

  get outputs(): UdpateDefeseCall__Outputs {
    return new UdpateDefeseCall__Outputs(this);
  }
}

export class UdpateDefeseCall__Inputs {
  _call: UdpateDefeseCall;

  constructor(call: UdpateDefeseCall) {
    this._call = call;
  }
}

export class UdpateDefeseCall__Outputs {
  _call: UdpateDefeseCall;

  constructor(call: UdpateDefeseCall) {
    this._call = call;
  }
}

export class ConsumeBasicHealthPotionCall extends ethereum.Call {
  get inputs(): ConsumeBasicHealthPotionCall__Inputs {
    return new ConsumeBasicHealthPotionCall__Inputs(this);
  }

  get outputs(): ConsumeBasicHealthPotionCall__Outputs {
    return new ConsumeBasicHealthPotionCall__Outputs(this);
  }
}

export class ConsumeBasicHealthPotionCall__Inputs {
  _call: ConsumeBasicHealthPotionCall;

  constructor(call: ConsumeBasicHealthPotionCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _basicPotionSchemaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConsumeBasicHealthPotionCall__Outputs {
  _call: ConsumeBasicHealthPotionCall;

  constructor(call: ConsumeBasicHealthPotionCall) {
    this._call = call;
  }
}

export class CreateBasicPotionCall extends ethereum.Call {
  get inputs(): CreateBasicPotionCall__Inputs {
    return new CreateBasicPotionCall__Inputs(this);
  }

  get outputs(): CreateBasicPotionCall__Outputs {
    return new CreateBasicPotionCall__Outputs(this);
  }
}

export class CreateBasicPotionCall__Inputs {
  _call: CreateBasicPotionCall;

  constructor(call: CreateBasicPotionCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cost(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _isHealth(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateBasicPotionCall__Outputs {
  _call: CreateBasicPotionCall;

  constructor(call: CreateBasicPotionCall) {
    this._call = call;
  }
}

export class PurchaseBasicPotionCall extends ethereum.Call {
  get inputs(): PurchaseBasicPotionCall__Inputs {
    return new PurchaseBasicPotionCall__Inputs(this);
  }

  get outputs(): PurchaseBasicPotionCall__Outputs {
    return new PurchaseBasicPotionCall__Outputs(this);
  }
}

export class PurchaseBasicPotionCall__Inputs {
  _call: PurchaseBasicPotionCall;

  constructor(call: PurchaseBasicPotionCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _basicPotionSchemaId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PurchaseBasicPotionCall__Outputs {
  _call: PurchaseBasicPotionCall;

  constructor(call: PurchaseBasicPotionCall) {
    this._call = call;
  }
}

export class EndTrainingBasicHealthCall extends ethereum.Call {
  get inputs(): EndTrainingBasicHealthCall__Inputs {
    return new EndTrainingBasicHealthCall__Inputs(this);
  }

  get outputs(): EndTrainingBasicHealthCall__Outputs {
    return new EndTrainingBasicHealthCall__Outputs(this);
  }
}

export class EndTrainingBasicHealthCall__Inputs {
  _call: EndTrainingBasicHealthCall;

  constructor(call: EndTrainingBasicHealthCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndTrainingBasicHealthCall__Outputs {
  _call: EndTrainingBasicHealthCall;

  constructor(call: EndTrainingBasicHealthCall) {
    this._call = call;
  }
}

export class EndTrainingManaCall extends ethereum.Call {
  get inputs(): EndTrainingManaCall__Inputs {
    return new EndTrainingManaCall__Inputs(this);
  }

  get outputs(): EndTrainingManaCall__Outputs {
    return new EndTrainingManaCall__Outputs(this);
  }
}

export class EndTrainingManaCall__Inputs {
  _call: EndTrainingManaCall;

  constructor(call: EndTrainingManaCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndTrainingManaCall__Outputs {
  _call: EndTrainingManaCall;

  constructor(call: EndTrainingManaCall) {
    this._call = call;
  }
}

export class StartTrainingBasicHealthCall extends ethereum.Call {
  get inputs(): StartTrainingBasicHealthCall__Inputs {
    return new StartTrainingBasicHealthCall__Inputs(this);
  }

  get outputs(): StartTrainingBasicHealthCall__Outputs {
    return new StartTrainingBasicHealthCall__Outputs(this);
  }
}

export class StartTrainingBasicHealthCall__Inputs {
  _call: StartTrainingBasicHealthCall;

  constructor(call: StartTrainingBasicHealthCall) {
    this._call = call;
  }

  get _playerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartTrainingBasicHealthCall__Outputs {
  _call: StartTrainingBasicHealthCall;

  constructor(call: StartTrainingBasicHealthCall) {
    this._call = call;
  }
}

export class StartTrainingManaCall extends ethereum.Call {
  get inputs(): StartTrainingManaCall__Inputs {
    return new StartTrainingManaCall__Inputs(this);
  }

  get outputs(): StartTrainingManaCall__Outputs {
    return new StartTrainingManaCall__Outputs(this);
  }
}

export class StartTrainingManaCall__Inputs {
  _call: StartTrainingManaCall;

  constructor(call: StartTrainingManaCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartTrainingManaCall__Outputs {
  _call: StartTrainingManaCall;

  constructor(call: StartTrainingManaCall) {
    this._call = call;
  }
}

export class ClaimTreasureDropGravityOrbCall extends ethereum.Call {
  get inputs(): ClaimTreasureDropGravityOrbCall__Inputs {
    return new ClaimTreasureDropGravityOrbCall__Inputs(this);
  }

  get outputs(): ClaimTreasureDropGravityOrbCall__Outputs {
    return new ClaimTreasureDropGravityOrbCall__Outputs(this);
  }
}

export class ClaimTreasureDropGravityOrbCall__Inputs {
  _call: ClaimTreasureDropGravityOrbCall;

  constructor(call: ClaimTreasureDropGravityOrbCall) {
    this._call = call;
  }

  get _treasureDropId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _playerId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimTreasureDropGravityOrbCall__Outputs {
  _call: ClaimTreasureDropGravityOrbCall;

  constructor(call: ClaimTreasureDropGravityOrbCall) {
    this._call = call;
  }
}

export class ClaimTreasureDropKyberShardCall extends ethereum.Call {
  get inputs(): ClaimTreasureDropKyberShardCall__Inputs {
    return new ClaimTreasureDropKyberShardCall__Inputs(this);
  }

  get outputs(): ClaimTreasureDropKyberShardCall__Outputs {
    return new ClaimTreasureDropKyberShardCall__Outputs(this);
  }
}

export class ClaimTreasureDropKyberShardCall__Inputs {
  _call: ClaimTreasureDropKyberShardCall;

  constructor(call: ClaimTreasureDropKyberShardCall) {
    this._call = call;
  }

  get _treasureDropId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _playerId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimTreasureDropKyberShardCall__Outputs {
  _call: ClaimTreasureDropKyberShardCall;

  constructor(call: ClaimTreasureDropKyberShardCall) {
    this._call = call;
  }
}

export class CreateTreasureDropCall extends ethereum.Call {
  get inputs(): CreateTreasureDropCall__Inputs {
    return new CreateTreasureDropCall__Inputs(this);
  }

  get outputs(): CreateTreasureDropCall__Outputs {
    return new CreateTreasureDropCall__Outputs(this);
  }
}

export class CreateTreasureDropCall__Inputs {
  _call: CreateTreasureDropCall;

  constructor(call: CreateTreasureDropCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateTreasureDropCall__Outputs {
  _call: CreateTreasureDropCall;

  constructor(call: CreateTreasureDropCall) {
    this._call = call;
  }
}

export class CreateTreasureSchemaCall extends ethereum.Call {
  get inputs(): CreateTreasureSchemaCall__Inputs {
    return new CreateTreasureSchemaCall__Inputs(this);
  }

  get outputs(): CreateTreasureSchemaCall__Outputs {
    return new CreateTreasureSchemaCall__Outputs(this);
  }
}

export class CreateTreasureSchemaCall__Inputs {
  _call: CreateTreasureSchemaCall;

  constructor(call: CreateTreasureSchemaCall) {
    this._call = call;
  }

  get _rank(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateTreasureSchemaCall__Outputs {
  _call: CreateTreasureSchemaCall;

  constructor(call: CreateTreasureSchemaCall) {
    this._call = call;
  }
}

export class DiamondCut1Call extends ethereum.Call {
  get inputs(): DiamondCut1Call__Inputs {
    return new DiamondCut1Call__Inputs(this);
  }

  get outputs(): DiamondCut1Call__Outputs {
    return new DiamondCut1Call__Outputs(this);
  }
}

export class DiamondCut1Call__Inputs {
  _call: DiamondCut1Call;

  constructor(call: DiamondCut1Call) {
    this._call = call;
  }

  get _diamondCut(): Array<DiamondCut1Call_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DiamondCut1Call_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DiamondCut1Call__Outputs {
  _call: DiamondCut1Call;

  constructor(call: DiamondCut1Call) {
    this._call = call;
  }
}

export class DiamondCut1Call_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom2Call extends ethereum.Call {
  get inputs(): SafeTransferFrom2Call__Inputs {
    return new SafeTransferFrom2Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom2Call__Outputs {
    return new SafeTransferFrom2Call__Outputs(this);
  }
}

export class SafeTransferFrom2Call__Inputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFrom2Call__Outputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }
}

export class SetApprovalForAll1Call extends ethereum.Call {
  get inputs(): SetApprovalForAll1Call__Inputs {
    return new SetApprovalForAll1Call__Inputs(this);
  }

  get outputs(): SetApprovalForAll1Call__Outputs {
    return new SetApprovalForAll1Call__Outputs(this);
  }
}

export class SetApprovalForAll1Call__Inputs {
  _call: SetApprovalForAll1Call;

  constructor(call: SetApprovalForAll1Call) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAll1Call__Outputs {
  _call: SetApprovalForAll1Call;

  constructor(call: SetApprovalForAll1Call) {
    this._call = call;
  }
}

export class SafeBatchTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeBatchTransferFrom1Call__Inputs {
    return new SafeBatchTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeBatchTransferFrom1Call__Outputs {
    return new SafeBatchTransferFrom1Call__Outputs(this);
  }
}

export class SafeBatchTransferFrom1Call__Inputs {
  _call: SafeBatchTransferFrom1Call;

  constructor(call: SafeBatchTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFrom1Call__Outputs {
  _call: SafeBatchTransferFrom1Call;

  constructor(call: SafeBatchTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFrom3Call extends ethereum.Call {
  get inputs(): SafeTransferFrom3Call__Inputs {
    return new SafeTransferFrom3Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom3Call__Outputs {
    return new SafeTransferFrom3Call__Outputs(this);
  }
}

export class SafeTransferFrom3Call__Inputs {
  _call: SafeTransferFrom3Call;

  constructor(call: SafeTransferFrom3Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFrom3Call__Outputs {
  _call: SafeTransferFrom3Call;

  constructor(call: SafeTransferFrom3Call) {
    this._call = call;
  }
}

export class SetApprovalForAll2Call extends ethereum.Call {
  get inputs(): SetApprovalForAll2Call__Inputs {
    return new SetApprovalForAll2Call__Inputs(this);
  }

  get outputs(): SetApprovalForAll2Call__Outputs {
    return new SetApprovalForAll2Call__Outputs(this);
  }
}

export class SetApprovalForAll2Call__Inputs {
  _call: SetApprovalForAll2Call;

  constructor(call: SetApprovalForAll2Call) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAll2Call__Outputs {
  _call: SetApprovalForAll2Call;

  constructor(call: SetApprovalForAll2Call) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnership3Call extends ethereum.Call {
  get inputs(): TransferOwnership3Call__Inputs {
    return new TransferOwnership3Call__Inputs(this);
  }

  get outputs(): TransferOwnership3Call__Outputs {
    return new TransferOwnership3Call__Outputs(this);
  }
}

export class TransferOwnership3Call__Inputs {
  _call: TransferOwnership3Call;

  constructor(call: TransferOwnership3Call) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership3Call__Outputs {
  _call: TransferOwnership3Call;

  constructor(call: TransferOwnership3Call) {
    this._call = call;
  }
}

export class Approve1Call extends ethereum.Call {
  get inputs(): Approve1Call__Inputs {
    return new Approve1Call__Inputs(this);
  }

  get outputs(): Approve1Call__Outputs {
    return new Approve1Call__Outputs(this);
  }
}

export class Approve1Call__Inputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Approve1Call__Outputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }
}

export class SafeTransferFrom4Call extends ethereum.Call {
  get inputs(): SafeTransferFrom4Call__Inputs {
    return new SafeTransferFrom4Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom4Call__Outputs {
    return new SafeTransferFrom4Call__Outputs(this);
  }
}

export class SafeTransferFrom4Call__Inputs {
  _call: SafeTransferFrom4Call;

  constructor(call: SafeTransferFrom4Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFrom4Call__Outputs {
  _call: SafeTransferFrom4Call;

  constructor(call: SafeTransferFrom4Call) {
    this._call = call;
  }
}

export class SafeTransferFrom5Call extends ethereum.Call {
  get inputs(): SafeTransferFrom5Call__Inputs {
    return new SafeTransferFrom5Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom5Call__Outputs {
    return new SafeTransferFrom5Call__Outputs(this);
  }
}

export class SafeTransferFrom5Call__Inputs {
  _call: SafeTransferFrom5Call;

  constructor(call: SafeTransferFrom5Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom5Call__Outputs {
  _call: SafeTransferFrom5Call;

  constructor(call: SafeTransferFrom5Call) {
    this._call = call;
  }
}

export class SetApprovalForAll3Call extends ethereum.Call {
  get inputs(): SetApprovalForAll3Call__Inputs {
    return new SetApprovalForAll3Call__Inputs(this);
  }

  get outputs(): SetApprovalForAll3Call__Outputs {
    return new SetApprovalForAll3Call__Outputs(this);
  }
}

export class SetApprovalForAll3Call__Inputs {
  _call: SetApprovalForAll3Call;

  constructor(call: SetApprovalForAll3Call) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAll3Call__Outputs {
  _call: SetApprovalForAll3Call;

  constructor(call: SetApprovalForAll3Call) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class Approve2Call extends ethereum.Call {
  get inputs(): Approve2Call__Inputs {
    return new Approve2Call__Inputs(this);
  }

  get outputs(): Approve2Call__Outputs {
    return new Approve2Call__Outputs(this);
  }
}

export class Approve2Call__Inputs {
  _call: Approve2Call;

  constructor(call: Approve2Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Approve2Call__Outputs {
  _call: Approve2Call;

  constructor(call: Approve2Call) {
    this._call = call;
  }
}

export class SafeTransferFrom6Call extends ethereum.Call {
  get inputs(): SafeTransferFrom6Call__Inputs {
    return new SafeTransferFrom6Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom6Call__Outputs {
    return new SafeTransferFrom6Call__Outputs(this);
  }
}

export class SafeTransferFrom6Call__Inputs {
  _call: SafeTransferFrom6Call;

  constructor(call: SafeTransferFrom6Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFrom6Call__Outputs {
  _call: SafeTransferFrom6Call;

  constructor(call: SafeTransferFrom6Call) {
    this._call = call;
  }
}

export class SafeTransferFrom7Call extends ethereum.Call {
  get inputs(): SafeTransferFrom7Call__Inputs {
    return new SafeTransferFrom7Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom7Call__Outputs {
    return new SafeTransferFrom7Call__Outputs(this);
  }
}

export class SafeTransferFrom7Call__Inputs {
  _call: SafeTransferFrom7Call;

  constructor(call: SafeTransferFrom7Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom7Call__Outputs {
  _call: SafeTransferFrom7Call;

  constructor(call: SafeTransferFrom7Call) {
    this._call = call;
  }
}

export class SetApprovalForAll4Call extends ethereum.Call {
  get inputs(): SetApprovalForAll4Call__Inputs {
    return new SetApprovalForAll4Call__Inputs(this);
  }

  get outputs(): SetApprovalForAll4Call__Outputs {
    return new SetApprovalForAll4Call__Outputs(this);
  }
}

export class SetApprovalForAll4Call__Inputs {
  _call: SetApprovalForAll4Call;

  constructor(call: SetApprovalForAll4Call) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAll4Call__Outputs {
  _call: SetApprovalForAll4Call;

  constructor(call: SetApprovalForAll4Call) {
    this._call = call;
  }
}

export class TransferFrom1Call extends ethereum.Call {
  get inputs(): TransferFrom1Call__Inputs {
    return new TransferFrom1Call__Inputs(this);
  }

  get outputs(): TransferFrom1Call__Outputs {
    return new TransferFrom1Call__Outputs(this);
  }
}

export class TransferFrom1Call__Inputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom1Call__Outputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ISendCall extends ethereum.Call {
  get inputs(): ISendCall__Inputs {
    return new ISendCall__Inputs(this);
  }

  get outputs(): ISendCall__Outputs {
    return new ISendCall__Outputs(this);
  }
}

export class ISendCall__Inputs {
  _call: ISendCall;

  constructor(call: ISendCall) {
    this._call = call;
  }

  get version(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get routeAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get routeRecipient(): string {
    return this._call.inputValues[2].value.toString();
  }

  get destChainId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get requestMetadata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get requestPacket(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ISendCall__Outputs {
  _call: ISendCall;

  constructor(call: ISendCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDappMetadataCall extends ethereum.Call {
  get inputs(): SetDappMetadataCall__Inputs {
    return new SetDappMetadataCall__Inputs(this);
  }

  get outputs(): SetDappMetadataCall__Outputs {
    return new SetDappMetadataCall__Outputs(this);
  }
}

export class SetDappMetadataCall__Inputs {
  _call: SetDappMetadataCall;

  constructor(call: SetDappMetadataCall) {
    this._call = call;
  }

  get feePayerAddress(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetDappMetadataCall__Outputs {
  _call: SetDappMetadataCall;

  constructor(call: SetDappMetadataCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnership2Call extends ethereum.Call {
  get inputs(): RenounceOwnership2Call__Inputs {
    return new RenounceOwnership2Call__Inputs(this);
  }

  get outputs(): RenounceOwnership2Call__Outputs {
    return new RenounceOwnership2Call__Outputs(this);
  }
}

export class RenounceOwnership2Call__Inputs {
  _call: RenounceOwnership2Call;

  constructor(call: RenounceOwnership2Call) {
    this._call = call;
  }
}

export class RenounceOwnership2Call__Outputs {
  _call: RenounceOwnership2Call;

  constructor(call: RenounceOwnership2Call) {
    this._call = call;
  }
}

export class TransferOwnership4Call extends ethereum.Call {
  get inputs(): TransferOwnership4Call__Inputs {
    return new TransferOwnership4Call__Inputs(this);
  }

  get outputs(): TransferOwnership4Call__Outputs {
    return new TransferOwnership4Call__Outputs(this);
  }
}

export class TransferOwnership4Call__Inputs {
  _call: TransferOwnership4Call;

  constructor(call: TransferOwnership4Call) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership4Call__Outputs {
  _call: TransferOwnership4Call;

  constructor(call: TransferOwnership4Call) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}
